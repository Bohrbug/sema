{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/moo/moo.js","webpack:///./node_modules/nearley/lib/nearley.js","webpack:///./src/IR/IR.js","webpack:///./src/language/livelang.js","webpack:///./src/language/nearley.worker.js","webpack:///./src/language/semaIR.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA,MAAM,IAA0C;AAChD,IAAI,iCAAO,EAAE,oCAAE,OAAO;AAAA;AAAA;AAAA,oGAAC;AACvB,GAAG,MAAM,EAIN;AACH,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,sBAAsB;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,wBAAwB;AACxB,wBAAwB;;AAExB;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA,KAAK;AACL;AACA,2BAA2B;AAC3B,uBAAuB;AACvB,uBAAuB;AACvB,0BAA0B;AAC1B;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,YAAY;AACZ;;AAEA;AACA;AACA,sBAAsB,cAAc;AACpC;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;;AAEA,iBAAiB,eAAe;AAChC;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA,iCAAiC;AACjC,sCAAsC;AACtC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,OAAO;AACP,kBAAkB;AAClB;AACA,gBAAgB;AAChB,gBAAgB;AAChB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mDAAmD;AACnD;AACA,GAAG,iBAAiB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,oCAAoC,cAAc;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,0BAA0B,YAAY;AACtC;;AAEA,CAAC;;;;;;;;;;;;AC7cD;AACA,QAAQ,KAA0B;AAClC;AACA,KAAK;AACL;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,qCAAqC;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,4BAA4B;AAC5B,4BAA4B;AAC5B;;;AAGA;AACA;AACA;AACA;;AAEA,uBAAuB,mBAAmB,OAAO;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD,KAAK,IAAI;AAC1D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,kBAAkB;AACzD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,qDAAqD,EAAE;AACnG;AACA,wBAAwB;AACxB;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAA0C,KAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,2DAA2D;AAC3G;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,+CAA+C,cAAc,EAAE;AAC/D;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;ACveD;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,EAAE;AACxB,wBAAwB,EAAE,cAAc,+BAA+B,EAAE;AACzE,sBAAsB,EAAE,OAAO,UAAU;AACzC,EAAE;AACF;AACA,sBAAsB,EAAE;AACxB,wBAAwB,EAAE,cAAc,+BAA+B,EAAE;AACzE,sBAAsB,EAAE,YAAY,UAAU;AAC9C,EAAE;AACF;AACA,sBAAsB,EAAE;AACxB,wBAAwB,EAAE,cAAc,+BAA+B,EAAE;AACzE,sBAAsB,EAAE,YAAY,UAAU;AAC9C,EAAE;AACF;AACA,sBAAsB,EAAE;AACxB,wBAAwB,EAAE,cAAc,+BAA+B,EAAE;AACzE,sBAAsB,EAAE,UAAU,UAAU;AAC5C,E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","file":"3e8c2621cc32de2c7081.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/language/nearley.worker.js\");\n","(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory) /* global define */\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory()\n  } else {\n    root.moo = factory()\n  }\n}(this, function() {\n  'use strict';\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty\n\n  // polyfill assign(), so we support IE9+\n  var assign = typeof Object.assign === 'function' ? Object.assign :\n    // https://tc39.github.io/ecma262/#sec-object.assign\n    function(target, sources) {\n      if (target == null) {\n        throw new TypeError('Target cannot be null or undefined');\n      }\n      target = Object(target)\n\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i]\n        if (source == null) continue\n\n        for (var key in source) {\n          if (hasOwnProperty.call(source, key)) {\n            target[key] = source[key]\n          }\n        }\n      }\n      return target\n    }\n\n  var hasSticky = typeof new RegExp().sticky === 'boolean'\n\n  /***************************************************************************/\n\n  function isRegExp(o) { return o && o.constructor === RegExp }\n  function isObject(o) { return o && typeof o === 'object' && o.constructor !== RegExp && !Array.isArray(o) }\n\n  function reEscape(s) {\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n  }\n  function reGroups(s) {\n    var re = new RegExp('|' + s)\n    return re.exec('').length - 1\n  }\n  function reCapture(s) {\n    return '(' + s + ')'\n  }\n  function reUnion(regexps) {\n    var source =  regexps.map(function(s) {\n      return \"(?:\" + s + \")\"\n    }).join('|')\n    return \"(?:\" + source + \")\"\n  }\n\n  function regexpOrLiteral(obj) {\n    if (typeof obj === 'string') {\n      return '(?:' + reEscape(obj) + ')'\n\n    } else if (isRegExp(obj)) {\n      // TODO: consider /u support\n      if (obj.ignoreCase) { throw new Error('RegExp /i flag not allowed') }\n      if (obj.global) { throw new Error('RegExp /g flag is implied') }\n      if (obj.sticky) { throw new Error('RegExp /y flag is implied') }\n      if (obj.multiline) { throw new Error('RegExp /m flag is implied') }\n      return obj.source\n\n    } else {\n      throw new Error('not a pattern: ' + obj)\n    }\n  }\n\n  function objectToRules(object) {\n    var keys = Object.getOwnPropertyNames(object)\n    var result = []\n    for (var i=0; i<keys.length; i++) {\n      var key = keys[i]\n      var thing = object[key]\n      var rules = Array.isArray(thing) ? thing : [thing]\n      var match = []\n      rules.forEach(function(rule) {\n        if (isObject(rule)) {\n          if (match.length) result.push(ruleOptions(key, match))\n          result.push(ruleOptions(key, rule))\n          match = []\n        } else {\n          match.push(rule)\n        }\n      })\n      if (match.length) result.push(ruleOptions(key, match))\n    }\n    return result\n  }\n\n  function arrayToRules(array) {\n    var result = []\n    for (var i=0; i<array.length; i++) {\n      var obj = array[i]\n      if (!obj.name) {\n        throw new Error('Rule has no name: ' + JSON.stringify(obj))\n      }\n      result.push(ruleOptions(obj.name, obj))\n    }\n    return result\n  }\n\n  function ruleOptions(name, obj) {\n    if (typeof obj !== 'object' || Array.isArray(obj) || isRegExp(obj)) {\n      obj = { match: obj }\n    }\n\n    // nb. error implies lineBreaks\n    var options = assign({\n      tokenType: name,\n      lineBreaks: !!obj.error,\n      pop: false,\n      next: null,\n      push: null,\n      error: false,\n      value: null,\n      getType: null,\n    }, obj)\n\n    // convert to array\n    var match = options.match\n    options.match = Array.isArray(match) ? match : match ? [match] : []\n    options.match.sort(function(a, b) {\n      return isRegExp(a) && isRegExp(b) ? 0\n           : isRegExp(b) ? -1 : isRegExp(a) ? +1 : b.length - a.length\n    })\n    if (options.keywords) {\n      options.getType = keywordTransform(options.keywords)\n    }\n    return options\n  }\n\n  function compileRules(rules, hasStates) {\n    rules = Array.isArray(rules) ? arrayToRules(rules) : objectToRules(rules)\n\n    var errorRule = null\n    var groups = []\n    var parts = []\n    for (var i=0; i<rules.length; i++) {\n      var options = rules[i]\n\n      if (options.error) {\n        if (errorRule) {\n          throw new Error(\"Multiple error rules not allowed: (for token '\" + options.tokenType + \"')\")\n        }\n        errorRule = options\n      }\n\n      // skip rules with no match\n      if (options.match.length === 0) {\n        continue\n      }\n      groups.push(options)\n\n      // convert to RegExp\n      var pat = reUnion(options.match.map(regexpOrLiteral))\n\n      // validate\n      var regexp = new RegExp(pat)\n      if (regexp.test(\"\")) {\n        throw new Error(\"RegExp matches empty string: \" + regexp)\n      }\n      var groupCount = reGroups(pat)\n      if (groupCount > 0) {\n        throw new Error(\"RegExp has capture groups: \" + regexp + \"\\nUse (?: … ) instead\")\n      }\n      if (!hasStates && (options.pop || options.push || options.next)) {\n        throw new Error(\"State-switching options are not allowed in stateless lexers (for token '\" + options.tokenType + \"')\")\n      }\n\n      // try and detect rules matching newlines\n      if (!options.lineBreaks && regexp.test('\\n')) {\n        throw new Error('Rule should declare lineBreaks: ' + regexp)\n      }\n\n      // store regex\n      parts.push(reCapture(pat))\n    }\n\n    var suffix = hasSticky ? '' : '|(?:)'\n    var flags = hasSticky ? 'ym' : 'gm'\n    var combined = new RegExp(reUnion(parts) + suffix, flags)\n\n    return {regexp: combined, groups: groups, error: errorRule}\n  }\n\n  function compile(rules) {\n    var result = compileRules(rules)\n    return new Lexer({start: result}, 'start')\n  }\n\n  function compileStates(states, start) {\n    var keys = Object.getOwnPropertyNames(states)\n    if (!start) start = keys[0]\n\n    var map = Object.create(null)\n    for (var i=0; i<keys.length; i++) {\n      var key = keys[i]\n      map[key] = compileRules(states[key], true)\n    }\n\n    for (var i=0; i<keys.length; i++) {\n      var groups = map[keys[i]].groups\n      for (var j=0; j<groups.length; j++) {\n        var g = groups[j]\n        var state = g && (g.push || g.next)\n        if (state && !map[state]) {\n          throw new Error(\"Missing state '\" + state + \"' (in token '\" + g.tokenType + \"' of state '\" + keys[i] + \"')\")\n        }\n        if (g && g.pop && +g.pop !== 1) {\n          throw new Error(\"pop must be 1 (in token '\" + g.tokenType + \"' of state '\" + keys[i] + \"')\")\n        }\n      }\n    }\n\n    return new Lexer(map, start)\n  }\n\n  function keywordTransform(map) {\n    var reverseMap = Object.create(null)\n    var byLength = Object.create(null)\n    var types = Object.getOwnPropertyNames(map)\n    for (var i=0; i<types.length; i++) {\n      var tokenType = types[i]\n      var item = map[tokenType]\n      var keywordList = Array.isArray(item) ? item : [item]\n      keywordList.forEach(function(keyword) {\n        (byLength[keyword.length] = byLength[keyword.length] || []).push(keyword)\n        if (typeof keyword !== 'string') {\n          throw new Error(\"keyword must be string (in keyword '\" + tokenType + \"')\")\n        }\n        reverseMap[keyword] = tokenType\n      })\n    }\n\n    // fast string lookup\n    // https://jsperf.com/string-lookups\n    function str(x) { return JSON.stringify(x) }\n    var source = ''\n    source += '(function(value) {\\n'\n    source += 'switch (value.length) {\\n'\n    for (var length in byLength) {\n      var keywords = byLength[length]\n      source += 'case ' + length + ':\\n'\n      source += 'switch (value) {\\n'\n      keywords.forEach(function(keyword) {\n        var tokenType = reverseMap[keyword]\n        source += 'case ' + str(keyword) + ': return ' + str(tokenType) + '\\n'\n      })\n      source += '}\\n'\n    }\n    source += '}\\n'\n    source += '})'\n    return eval(source) // getType\n  }\n\n  /***************************************************************************/\n\n  var Lexer = function(states, state) {\n    this.startState = state\n    this.states = states\n    this.buffer = ''\n    this.stack = []\n    this.reset()\n  }\n\n  Lexer.prototype.reset = function(data, info) {\n    this.buffer = data || ''\n    this.index = 0\n    this.line = info ? info.line : 1\n    this.col = info ? info.col : 1\n    this.setState(info ? info.state : this.startState)\n    return this\n  }\n\n  Lexer.prototype.save = function() {\n    return {\n      line: this.line,\n      col: this.col,\n      state: this.state,\n    }\n  }\n\n  Lexer.prototype.setState = function(state) {\n    if (!state || this.state === state) return\n    this.state = state\n    var info = this.states[state]\n    this.groups = info.groups\n    this.error = info.error || {lineBreaks: true, shouldThrow: true}\n    this.re = info.regexp\n  }\n\n  Lexer.prototype.popState = function() {\n    this.setState(this.stack.pop())\n  }\n\n  Lexer.prototype.pushState = function(state) {\n    this.stack.push(this.state)\n    this.setState(state)\n  }\n\n  Lexer.prototype._eat = hasSticky ? function(re) { // assume re is /y\n    return re.exec(this.buffer)\n  } : function(re) { // assume re is /g\n    var match = re.exec(this.buffer)\n    // will always match, since we used the |(?:) trick\n    if (match[0].length === 0) {\n      return null\n    }\n    return match\n  }\n\n  Lexer.prototype._getGroup = function(match) {\n    if (match === null) {\n      return -1\n    }\n\n    var groupCount = this.groups.length\n    for (var i = 0; i < groupCount; i++) {\n      if (match[i + 1] !== undefined) {\n        return i\n      }\n    }\n    throw new Error('oops')\n  }\n\n  function tokenToString() {\n    return this.value\n  }\n\n  Lexer.prototype.next = function() {\n    var re = this.re\n    var buffer = this.buffer\n\n    var index = re.lastIndex = this.index\n    if (index === buffer.length) {\n      return // EOF\n    }\n\n    var match = this._eat(re)\n    var i = this._getGroup(match)\n\n    var group, text\n    if (i === -1) {\n      group = this.error\n\n      // consume rest of buffer\n      text = buffer.slice(index)\n\n    } else {\n      text = match[0]\n      group = this.groups[i]\n    }\n\n    // count line breaks\n    var lineBreaks = 0\n    if (group.lineBreaks) {\n      var matchNL = /\\n/g\n      var nl = 1\n      if (text === '\\n') {\n        lineBreaks = 1\n      } else {\n        while (matchNL.exec(text)) { lineBreaks++; nl = matchNL.lastIndex }\n      }\n    }\n\n    var token = {\n      type: (group.getType && group.getType(text)) || group.tokenType,\n      value: group.value ? group.value(text) : text,\n      text: text,\n      toString: tokenToString,\n      offset: index,\n      lineBreaks: lineBreaks,\n      line: this.line,\n      col: this.col,\n    }\n    // nb. adding more props to token object will make V8 sad!\n\n    var size = text.length\n    this.index += size\n    this.line += lineBreaks\n    if (lineBreaks !== 0) {\n      this.col = size - nl + 1\n    } else {\n      this.col += size\n    }\n    // throw, if no rule with {error: true}\n    if (group.shouldThrow) {\n      throw new Error(this.formatError(token, \"invalid syntax\"))\n    }\n\n    if (group.pop) this.popState()\n    else if (group.push) this.pushState(group.push)\n    else if (group.next) this.setState(group.next)\n    return token\n  }\n\n  if (typeof Symbol !== 'undefined' && Symbol.iterator) {\n    var LexerIterator = function(lexer) {\n      this.lexer = lexer\n    }\n\n    LexerIterator.prototype.next = function() {\n      var token = this.lexer.next()\n      return {value: token, done: !token}\n    }\n\n    LexerIterator.prototype[Symbol.iterator] = function() {\n      return this\n    }\n\n    Lexer.prototype[Symbol.iterator] = function() {\n      return new LexerIterator(this)\n    }\n  }\n\n  Lexer.prototype.formatError = function(token, message) {\n    var value = token.value\n    var index = token.offset\n    var eol = token.lineBreaks ? value.indexOf('\\n') : value.length\n    var start = Math.max(0, index - token.col + 1)\n    var firstLine = this.buffer.substring(start, index + eol)\n    message += \" at line \" + token.line + \" col \" + token.col + \":\\n\\n\"\n    message += \"  \" + firstLine + \"\\n\"\n    message += \"  \" + Array(token.col).join(\" \") + \"^\"\n    return message\n  }\n\n  Lexer.prototype.clone = function() {\n    return new Lexer(this.states, this.state)\n  }\n\n  Lexer.prototype.has = function(tokenType) {\n    for (var s in this.states) {\n      var groups = this.states[s].groups\n      for (var i=0; i<groups.length; i++) {\n        var group = groups[i]\n        if (group.tokenType === tokenType) return true\n        if (group.keywords && hasOwnProperty.call(group.keywords, tokenType)) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n\n\n  return {\n    compile: compile,\n    states: compileStates,\n    error: Object.freeze({error: true}),\n  }\n\n}))\n","(function(root, factory) {\n    if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        root.nearley = factory();\n    }\n}(this, function() {\n\n    function Rule(name, symbols, postprocess) {\n        this.id = ++Rule.highestId;\n        this.name = name;\n        this.symbols = symbols;        // a list of literal | regex class | nonterminal\n        this.postprocess = postprocess;\n        return this;\n    }\n    Rule.highestId = 0;\n\n    Rule.prototype.toString = function(withCursorAt) {\n        function stringifySymbolSequence (e) {\n            return e.literal ? JSON.stringify(e.literal) :\n                   e.type ? '%' + e.type : e.toString();\n        }\n        var symbolSequence = (typeof withCursorAt === \"undefined\")\n                             ? this.symbols.map(stringifySymbolSequence).join(' ')\n                             : (   this.symbols.slice(0, withCursorAt).map(stringifySymbolSequence).join(' ')\n                                 + \" ● \"\n                                 + this.symbols.slice(withCursorAt).map(stringifySymbolSequence).join(' ')     );\n        return this.name + \" → \" + symbolSequence;\n    }\n\n\n    // a State is a rule at a position from a given starting point in the input stream (reference)\n    function State(rule, dot, reference, wantedBy) {\n        this.rule = rule;\n        this.dot = dot;\n        this.reference = reference;\n        this.data = [];\n        this.wantedBy = wantedBy;\n        this.isComplete = this.dot === rule.symbols.length;\n    }\n\n    State.prototype.toString = function() {\n        return \"{\" + this.rule.toString(this.dot) + \"}, from: \" + (this.reference || 0);\n    };\n\n    State.prototype.nextState = function(child) {\n        var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);\n        state.left = this;\n        state.right = child;\n        if (state.isComplete) {\n            state.data = state.build();\n        }\n        return state;\n    };\n\n    State.prototype.build = function() {\n        var children = [];\n        var node = this;\n        do {\n            children.push(node.right.data);\n            node = node.left;\n        } while (node.left);\n        children.reverse();\n        return children;\n    };\n\n    State.prototype.finish = function() {\n        if (this.rule.postprocess) {\n            this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);\n        }\n    };\n\n\n    function Column(grammar, index) {\n        this.grammar = grammar;\n        this.index = index;\n        this.states = [];\n        this.wants = {}; // states indexed by the non-terminal they expect\n        this.scannable = []; // list of states that expect a token\n        this.completed = {}; // states that are nullable\n    }\n\n\n    Column.prototype.process = function(nextColumn) {\n        var states = this.states;\n        var wants = this.wants;\n        var completed = this.completed;\n\n        for (var w = 0; w < states.length; w++) { // nb. we push() during iteration\n            var state = states[w];\n\n            if (state.isComplete) {\n                state.finish();\n                if (state.data !== Parser.fail) {\n                    // complete\n                    var wantedBy = state.wantedBy;\n                    for (var i = wantedBy.length; i--; ) { // this line is hot\n                        var left = wantedBy[i];\n                        this.complete(left, state);\n                    }\n\n                    // special-case nullables\n                    if (state.reference === this.index) {\n                        // make sure future predictors of this rule get completed.\n                        var exp = state.rule.name;\n                        (this.completed[exp] = this.completed[exp] || []).push(state);\n                    }\n                }\n\n            } else {\n                // queue scannable states\n                var exp = state.rule.symbols[state.dot];\n                if (typeof exp !== 'string') {\n                    this.scannable.push(state);\n                    continue;\n                }\n\n                // predict\n                if (wants[exp]) {\n                    wants[exp].push(state);\n\n                    if (completed.hasOwnProperty(exp)) {\n                        var nulls = completed[exp];\n                        for (var i = 0; i < nulls.length; i++) {\n                            var right = nulls[i];\n                            this.complete(state, right);\n                        }\n                    }\n                } else {\n                    wants[exp] = [state];\n                    this.predict(exp);\n                }\n            }\n        }\n    }\n\n    Column.prototype.predict = function(exp) {\n        var rules = this.grammar.byName[exp] || [];\n\n        for (var i = 0; i < rules.length; i++) {\n            var r = rules[i];\n            var wantedBy = this.wants[exp];\n            var s = new State(r, 0, this.index, wantedBy);\n            this.states.push(s);\n        }\n    }\n\n    Column.prototype.complete = function(left, right) {\n        var copy = left.nextState(right);\n        this.states.push(copy);\n    }\n\n\n    function Grammar(rules, start) {\n        this.rules = rules;\n        this.start = start || this.rules[0].name;\n        var byName = this.byName = {};\n        this.rules.forEach(function(rule) {\n            if (!byName.hasOwnProperty(rule.name)) {\n                byName[rule.name] = [];\n            }\n            byName[rule.name].push(rule);\n        });\n    }\n\n    // So we can allow passing (rules, start) directly to Parser for backwards compatibility\n    Grammar.fromCompiled = function(rules, start) {\n        var lexer = rules.Lexer;\n        if (rules.ParserStart) {\n          start = rules.ParserStart;\n          rules = rules.ParserRules;\n        }\n        var rules = rules.map(function (r) { return (new Rule(r.name, r.symbols, r.postprocess)); });\n        var g = new Grammar(rules, start);\n        g.lexer = lexer; // nb. storing lexer on Grammar is iffy, but unavoidable\n        return g;\n    }\n\n\n    function StreamLexer() {\n      this.reset(\"\");\n    }\n\n    StreamLexer.prototype.reset = function(data, state) {\n        this.buffer = data;\n        this.index = 0;\n        this.line = state ? state.line : 1;\n        this.lastLineBreak = state ? -state.col : 0;\n    }\n\n    StreamLexer.prototype.next = function() {\n        if (this.index < this.buffer.length) {\n            var ch = this.buffer[this.index++];\n            if (ch === '\\n') {\n              this.line += 1;\n              this.lastLineBreak = this.index;\n            }\n            return {value: ch};\n        }\n    }\n\n    StreamLexer.prototype.save = function() {\n      return {\n        line: this.line,\n        col: this.index - this.lastLineBreak,\n      }\n    }\n\n    StreamLexer.prototype.formatError = function(token, message) {\n        // nb. this gets called after consuming the offending token,\n        // so the culprit is index-1\n        var buffer = this.buffer;\n        if (typeof buffer === 'string') {\n            var nextLineBreak = buffer.indexOf('\\n', this.index);\n            if (nextLineBreak === -1) nextLineBreak = buffer.length;\n            var line = buffer.substring(this.lastLineBreak, nextLineBreak)\n            var col = this.index - this.lastLineBreak;\n            message += \" at line \" + this.line + \" col \" + col + \":\\n\\n\";\n            message += \"  \" + line + \"\\n\"\n            message += \"  \" + Array(col).join(\" \") + \"^\"\n            return message;\n        } else {\n            return message + \" at index \" + (this.index - 1);\n        }\n    }\n\n\n    function Parser(rules, start, options) {\n        if (rules instanceof Grammar) {\n            var grammar = rules;\n            var options = start;\n        } else {\n            var grammar = Grammar.fromCompiled(rules, start);\n        }\n        this.grammar = grammar;\n\n        // Read options\n        this.options = {\n            keepHistory: false,\n            lexer: grammar.lexer || new StreamLexer,\n        };\n        for (var key in (options || {})) {\n            this.options[key] = options[key];\n        }\n\n        // Setup lexer\n        this.lexer = this.options.lexer;\n        this.lexerState = undefined;\n\n        // Setup a table\n        var column = new Column(grammar, 0);\n        var table = this.table = [column];\n\n        // I could be expecting anything.\n        column.wants[grammar.start] = [];\n        column.predict(grammar.start);\n        // TODO what if start rule is nullable?\n        column.process();\n        this.current = 0; // token index\n    }\n\n    // create a reserved token for indicating a parse fail\n    Parser.fail = {};\n\n    Parser.prototype.feed = function(chunk) {\n        var lexer = this.lexer;\n        lexer.reset(chunk, this.lexerState);\n\n        var token;\n        while (token = lexer.next()) {\n            // We add new states to table[current+1]\n            var column = this.table[this.current];\n\n            // GC unused states\n            if (!this.options.keepHistory) {\n                delete this.table[this.current - 1];\n            }\n\n            var n = this.current + 1;\n            var nextColumn = new Column(this.grammar, n);\n            this.table.push(nextColumn);\n\n            // Advance all tokens that expect the symbol\n            var literal = token.text !== undefined ? token.text : token.value;\n            var value = lexer.constructor === StreamLexer ? token.value : token;\n            var scannable = column.scannable;\n            for (var w = scannable.length; w--; ) {\n                var state = scannable[w];\n                var expect = state.rule.symbols[state.dot];\n                // Try to consume the token\n                // either regex or literal\n                if (expect.test ? expect.test(value) :\n                    expect.type ? expect.type === token.type\n                                : expect.literal === literal) {\n                    // Add it\n                    var next = state.nextState({data: value, token: token, isToken: true, reference: n - 1});\n                    nextColumn.states.push(next);\n                }\n            }\n\n            // Next, for each of the rules, we either\n            // (a) complete it, and try to see if the reference row expected that\n            //     rule\n            // (b) predict the next nonterminal it expects by adding that\n            //     nonterminal's start state\n            // To prevent duplication, we also keep track of rules we have already\n            // added\n\n            nextColumn.process();\n\n            // If needed, throw an error:\n            if (nextColumn.states.length === 0) {\n                // No states at all! This is not good.\n                var err = new Error(this.reportError(token));\n                err.offset = this.current;\n                err.token = token;\n                throw err;\n            }\n\n            // maybe save lexer state\n            if (this.options.keepHistory) {\n              column.lexerState = lexer.save()\n            }\n\n            this.current++;\n        }\n        if (column) {\n          this.lexerState = lexer.save()\n        }\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n\n        // Allow chaining, for whatever it's worth\n        return this;\n    };\n\n    Parser.prototype.reportError = function(token) {\n        var lines = [];\n        var tokenDisplay = (token.type ? token.type + \" token: \" : \"\") + JSON.stringify(token.value !== undefined ? token.value : token);\n        lines.push(this.lexer.formatError(token, \"Syntax error\"));\n        lines.push('Unexpected ' + tokenDisplay + '. Instead, I was expecting to see one of the following:\\n');\n        var lastColumnIndex = this.table.length - 2;\n        var lastColumn = this.table[lastColumnIndex];\n        var expectantStates = lastColumn.states\n            .filter(function(state) {\n                var nextSymbol = state.rule.symbols[state.dot];\n                return nextSymbol && typeof nextSymbol !== \"string\";\n            });\n        \n        // Display a \"state stack\" for each expectant state\n        // - which shows you how this state came to be, step by step. \n        // If there is more than one derivation, we only display the first one.\n        var stateStacks = expectantStates\n            .map(function(state) {\n                var stacks = this.buildStateStacks(state, []);\n                return stacks[0];\n            }, this);\n        // Display each state that is expecting a terminal symbol next.\n        stateStacks.forEach(function(stateStack) {\n            var state = stateStack[0];\n            var nextSymbol = state.rule.symbols[state.dot];\n            var symbolDisplay = this.getSymbolDisplay(nextSymbol);\n            lines.push('A ' + symbolDisplay + ' based on:');\n            this.displayStateStack(stateStack, lines);\n        }, this);\n            \n        lines.push(\"\");\n        return lines.join(\"\\n\");\n    };\n\n    Parser.prototype.displayStateStack = function(stateStack, lines) {\n        var lastDisplay;\n        var sameDisplayCount = 0;\n        for (var j = 0; j < stateStack.length; j++) {\n            var state = stateStack[j];\n            var display = state.rule.toString(state.dot);\n            if (display === lastDisplay) {\n                sameDisplayCount++;\n            } else {\n                if (sameDisplayCount > 0) {\n                    lines.push('    ⬆ ︎' + sameDisplayCount + ' more lines identical to this');\n                }\n                sameDisplayCount = 0;\n                lines.push('    ' + display);\n            }\n            lastDisplay = display;\n        }\n    };\n\n    Parser.prototype.getSymbolDisplay = function(symbol) {\n        var type = typeof symbol;\n        if (type === \"string\") {\n            return symbol;\n        } else if (type === \"object\" && symbol.literal) {\n            return JSON.stringify(symbol.literal);\n        } else if (type === \"object\" && symbol instanceof RegExp) {\n            return 'character matching ' + symbol;\n        } else if (type === \"object\" && symbol.type) {\n            return symbol.type + ' token';\n        } else {\n            throw new Error('Unknown symbol type: ' + symbol);\n        }\n    };\n\n    /*\n    Builds a number of \"state stacks\". You can think of a state stack as the call stack\n    of the recursive-descent parser which the Nearley parse algorithm simulates.\n    A state stack is represented as an array of state objects. Within a \n    state stack, the first item of the array will be the starting\n    state, with each successive item in the array going further back into history.\n    \n    This function needs to be given a starting state and an empty array representing\n    the visited states, and it returns an array of state stacks. \n    \n    */\n    Parser.prototype.buildStateStacks = function(state, visited) {\n        if (visited.indexOf(state) !== -1) {\n            // Found cycle, return empty array (meaning no stacks)\n            // to eliminate this path from the results, because\n            // we don't know how to display it meaningfully\n            return [];\n        }\n        if (state.wantedBy.length === 0) {\n            return [[state]];\n        }\n        var that = this;\n\n        return state.wantedBy.reduce(function(stacks, prevState) {\n            return stacks.concat(that.buildStateStacks(\n                prevState,\n                [state].concat(visited))\n                .map(function(stack) {\n                    return [state].concat(stack);\n                }));\n        }, []);\n    };\n\n    Parser.prototype.save = function() {\n        var column = this.table[this.current];\n        column.lexerState = this.lexerState;\n        return column;\n    };\n\n    Parser.prototype.restore = function(column) {\n        var index = column.index;\n        this.current = index;\n        this.table[index] = column;\n        this.table.splice(index + 1);\n        this.lexerState = column.lexerState;\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n    };\n\n    // nb. deprecated: use save/restore instead!\n    Parser.prototype.rewind = function(index) {\n        if (!this.options.keepHistory) {\n            throw new Error('set option `keepHistory` to enable rewinding')\n        }\n        // nb. recall column (table) indicies fall between token indicies.\n        //        col 0   --   token 0   --   col 1\n        this.restore(this.table[index]);\n    };\n\n    Parser.prototype.finish = function() {\n        // Return the possible parsings\n        var considerations = [];\n        var start = this.grammar.start;\n        var column = this.table[this.table.length - 1]\n        column.states.forEach(function (t) {\n            if (t.rule.name === start\n                    && t.dot === t.rule.symbols.length\n                    && t.reference === 0\n                    && t.data !== Parser.fail) {\n                considerations.push(t);\n            }\n        });\n        return considerations.map(function(c) {return c.data; });\n    };\n\n    return {\n        Parser: Parser,\n        Grammar: Grammar,\n        Rule: Rule,\n    };\n\n}));\n","var objectID = 0;\n\nconst oscMap = {\n  '@sin': \"sinewave\",\n  \"@saw\": \"saw\",\n  \"@square\": \"square\",\n  \"@tri\": \"triangle\",\n  \"@pha\": \"phasor\"\n};\n\nconst jsFuncMap = {\n\tsaw: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiOsc();\n                      ${o}.phaseReset(${p.length > 1 ? p[1].loop : 0.0});`,\n\t\tloop:  (o, p) => `${o}.saw(${p[0].loop})`\n\t},\n\tsin: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiOsc();\n                      ${o}.phaseReset(${p.length > 1 ? p[1].loop : 0.0});`,\n\t\tloop:  (o, p) => `${o}.sinewave(${p[0].loop})`\n\t},\n\ttri: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiOsc();\n                      ${o}.phaseReset(${p.length > 1 ? p[1].loop : 0.0});`,\n\t\tloop:  (o, p) => `${o}.triangle(${p[0].loop})`\n\t},\n\tpha: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiOsc();\n                      ${o}.phaseReset(${p.length > 1 ? p[1].loop : 0.0});`,\n\t\tloop:  (o, p) => `${o}.phasor(${p[0].loop})`\n\t},\n\tph2: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiOsc();\n                      ${o}.phaseReset(${p.length > 3 ? p[3].loop : 0.0});`,\n\t\tloop:  (o, p) => `${o}.phasor(${p[0].loop},${p[1].loop},${p[2].loop})`\n\t},\n\tsqr: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiOsc();\n                      ${o}.phaseReset(${p.length > 1 ? p[1].loop : 0.0});`,\n\t\tloop:  (o, p) => `${o}.square(${p[0].loop})`\n\t},\n\tpul: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiOsc();\n                      ${o}.phaseReset(${p.length > 2 ? p[2].loop : 0.0});`,\n\t\tloop:  (o, p) => `${o}.pulse(${p[0].loop},${p[1].loop})`\n\t},\n\timp: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiOsc();\n                      ${o}.phaseReset(${p.length > 1 ? p[1].loop : 0.0});`,\n\t\tloop:  (o, p) => `${o}.impulse(${p[0].loop})`\n\t},\n\tsawn: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiOsc();\n                      ${o}.phaseReset(${p.length > 1 ? p[1].loop : 0.0});`,\n\t\tloop:  (o, p) => `${o}.sawn(${p[0].loop})`\n\t},\n\tnoiz: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiOsc()`,\n\t\tloop:  (o, p) => `${o}.noise()*${p[0].loop}`\n\t},\n\tgt: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `(${p[0].loop} > ${p[1].loop}) ? 1 : 0`\n\t},\n\tlt: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `(${p[0].loop} < ${p[1].loop}) ? 1 : 0`\n\t},\n\tmod: {\n    setup: (o, p) => \"\",\n    loop:  (o, p) => `(${p[0].loop} % ${p[1].loop})` },\n\tadd: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiMath.add(${p[0].loop},${p[1].loop})`\n\t},\n\tmul: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiMath.mul(${p[0].loop},${p[1].loop})`\n\t},\n\tsub: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiMath.sub(${p[0].loop},${p[1].loop})`\n\t},\n\tdiv: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiMath.div(${p[0].loop},${p[1].loop})`\n\t},\n\tpow: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiMath.pow(${p[0].loop},${p[1].loop})`\n\t},\n\tabs: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiMath.abs(${p[0].loop})`\n\t},\n\tenv: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiEnv();\n                      ${o}.setAttack(${p[1].loop});\n                      ${o}.setDecay(${p[2].loop});\n                      ${o}.setSustain(${p[3].loop});\n                      ${o}.setRelease(${p[4].loop})`,\n\t\tloop:  (o, p) => `${o}.adsr(1,${p[0].loop})`\n\t},\n\tsum: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => {\n      let s = `(${p[0].loop}`;\n\t\t\tfor (let i = 1; i < p.length; i++)\n        s += `+${p[i].loop}`;\n\t\t\treturn s + \")\";\t}\n\t},\n\tmix: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => {\n\t\t\tlet s = `((${p[0].loop}`;\n\t\t\tfor (let i = 1; i < p.length; i++)\n        s += `+${p[i].loop}`;\n\t\t\treturn s + `)/${p.length})`;\n\t\t}\n\t},\n\tprod: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => {\n\t\t\tlet s = `(${p[0].loop}`;\n\t\t\tfor (let i = 1; i < p.length; i++)\n        s += `*${p[i].loop}`;\n\t\t\treturn s + \")\";\n\t\t}\n\t},\n\tblin: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiMap.linlin(${p[0].loop}, -1, 1, ${p[1].loop}, ${p[2].loop})`\n\t},\n\tulin: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiMap.linlin(${p[0].loop}, 0, 1, ${p[1].loop}, ${p[2].loop})`\n\t},\n\tbexp: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiMap.linexp(${p[0].loop}, -1, 1, ${p[1].loop}, ${p[2].loop})`\n\t},\n\tuexp: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiMap.linexp(${p[0].loop}, 0.0000001, 1, ${p[1].loop}, ${p[2].loop})`\n\t},\n\tlinlin: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiMap.linlin(${p[0].loop}, ${p[1].loop}, ${p[2].loop}),${p[3].loop}, ${p[4].loop})`\n\t},\n\tlinexp: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiMap.linexp(${p[0].loop}, ${p[1].loop}, ${p[2].loop}), ${p[3].loop}, ${p[4].loop})`\n\t},\n\tdist: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiDistortion()`,\n\t\tloop:  (o, p) => `${o}.atanDist(${p[0].loop},${p[1].loop})`\n\t},\n\tflange: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiFlanger()`,\n\t\tloop:  (o, p) => `${o}.flange(${p[0].loop},${p[1].loop},${p[2].loop},${p[3].loop},${p[4].loop})`\n\t},\n\tchor: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiChorus()`,\n\t\tloop:  (o, p) => `${o}.chorus(${p[0].loop},${p[1].loop},${p[2].loop},${p[3].loop},${p[4].loop})`\n\t},\n\tdl: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiDelayline()`,\n\t\tloop:  (o, p) => `${o}.dl(${p[0].loop},${p[1].loop},${p[2].loop})`\n\t},\n\tlpf: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiFilter()`,\n\t\tloop:  (o, p) => `${o}.lopass(${p[0].loop},${p[1].loop})`\n\t},\n\thpf: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiFilter()`,\n\t\tloop:  (o, p) => `${o}.hipass(${p[0].loop},${p[1].loop})`\n\t},\n\tlpz: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiFilter()`,\n\t\tloop:  (o, p) => `${o}.lores(${p[0].loop},${p[1].loop},${p[2].loop})`\n\t},\n\thpz: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiFilter()`,\n\t\tloop:  (o, p) => `${o}.hires(${p[0].loop},${p[1].loop},${p[2].loop})`\n\t},\n\ttoJS: {\n\t\tsetup: (o, p) => `${o} = this.registerTransducer('${o}', ${p[0].loop})`,\n\t\tloop:  (o, p) => `${o}.send(${p[1].loop}, ${p[2].loop})`\n\t},\n\tfromJS: {\n\t\tsetup: (o, p) => `${o} = this.registerTransducer('${o}', ${p[0].loop})`,\n\t\tloop:  (o, p) => `${o}.receive(${p[1].loop})`\n\t},\n\t// 'adc': {\"setup\":(o,p)=>\"\", \"loop\":(o,p)=>`inputs[${p[0].loop}]`},\n\tadc: { setup: (o, p) => \"\", loop: (o, p) => `inputs` },\n\tsampler: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiSample();\n                      ${o}.setSample(this.getSampleBuffer(${p[1].loop}));`,\n\t\tloop:  (o, p) => `(${o}.isReady() ? ${o}.playOnZX(${p[0].loop}) : 0.0)`\n\t},\n\tloop: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiSample();\n                      ${o}.setSample(this.getSampleBuffer(${p[1].loop}));`,\n\t\tloop:  (o, p) => `(${o}.isReady() ? ${o}.play(${p[0].loop}) : 0.0)`\n\t},\n\toscin: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `this.OSCTransducer(${p[0].loop},${p[1].loop})`\n\t},\n\toscout: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `this.OSCTransducer(${p[0].loop},${p[1].loop})`\n\t},\n\tsah: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiSampleAndHold();`,\n\t\tloop:  (o, p) => `${o}.sah(${p[0].loop},${p[1].loop})`\n\t},\n\tstretch: {\n\t\tsetup: (o, p) => `${o} = new Module.maxiSample();\n                      ${o}.setSample(this.getSampleBuffer(${p[4].loop}));\n                      ${o}stretch = new Module.maxiStretch();\n                      ${o}stretch.setSample(${o});`,\n\t\tloop:  (o, p) => `(${o}.isReady() ? ${o}stretch.play(${p[0].loop},${p[1].loop},${p[2].loop},${p[3].loop},0.0) : 0.0)`\n\t},\n  bitToSig: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiBits.toSignal(${p[0].loop})`\n\t},\n  bitNeg: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiBits.neg(${p[0].loop})`\n\t},\n  bitInc: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiBits.inc(${p[0].loop})`\n\t},\n  bitDec: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiBits.dec(${p[0].loop})`\n\t},\n  bitAnd: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiBits.land(${p[0].loop},${p[1].loop})`\n\t},\n  bitOr: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiBits.lor(${p[0].loop},${p[1].loop})`\n\t},\n  bitXor: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiBits.lxor(${p[0].loop},${p[1].loop})`\n\t},\n  bitShl: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiBits.shl(${p[0].loop},${p[1].loop})`\n\t},\n  bitShr: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiBits.shr(${p[0].loop},${p[1].loop})`\n\t},\n  bitAt: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiBits.at(${p[0].loop},${p[1].loop})`\n\t},\n  bitAdd: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiBits.add(${p[0].loop},${p[1].loop})`\n\t},\n  bitSub: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiBits.sub(${p[0].loop},${p[1].loop})`\n\t},\n  bitMul: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiBits.mul(${p[0].loop},${p[1].loop})`\n\t},\n  bitDiv: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiBits.div(${p[0].loop},${p[1].loop})`\n\t},\n  bitr: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `Module.maxiBits.at(${p[0].loop},${p[1].loop},${p[2].loop})`\n\t},\n  btime: {\n\t\tsetup: (o, p) =>`${o} = Module.maxiBits.sig(0); ${o}_tplus = () => {${o} = Module.maxiBits.inc(${o}); return ${o}};`,\n\t\tloop:  (o, p) => `${o}_tplus()`\n\t},\n  clp: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `this.clockPhase(${p[0].loop},${p.length > 1 ? p[1].loop : 0})`\n\t},\n  clt: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `this.clockTrig(${p[0].loop},${p.length > 1 ? p[1].loop : 0})`\n\t},\n  clfreq: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop:  (o, p) => `this.setClockFreq(${p[0].loop})`\n\t},\n\n};\n\nclass IRToJavascript {\n\n  static getNextID() {\n    objectID = objectID > 9999 ? 0 : ++objectID;\n    return objectID;\n  }\n\n  static emptyCode() {\n    return {\n      \"setup\": \"\",\n      \"loop\": \"\",\n      \"paramMarkers\": []\n    };\n  }\n\n  static traverseTree(t, code, level, vars) {\n    // console.log(`DEBUG:IR:traverseTree: level: ${level}`);\n    // console.log(vars);\n    let attribMap = {\n      '@lang': (ccode, el) => {\n        let statements = [];\n        el.map((langEl) => {\n          let statementCode = IRToJavascript.traverseTree(langEl, IRToJavascript.emptyCode(), level, vars);\n          console.log(\"@lang: \" + statementCode.loop);\n          ccode.setup += statementCode.setup;\n          ccode.loop += statementCode.loop;\n          // ccode.paramMarkers\n        });\n        return ccode;\n      },\n      '@sigOut': (ccode, el) => {\n        ccode = IRToJavascript.traverseTree(el, ccode, level, vars);\n        ccode.loop = `q.sigOut = ${ccode.loop};`;\n        return ccode;\n      },\n      '@spawn': (ccode, el) => {\n        ccode = IRToJavascript.traverseTree(el, ccode, level, vars);\n        ccode.loop += \";\";\n        return ccode;\n      },\n      '@sigp': (ccode, el) => {\n        let paramMarkers = [{\"s\":el['paramBegin'], \"e\":el['paramEnd'], \"l\":level}]\n        ccode.paramMarkers = ccode.paramMarkers.concat(paramMarkers);\n\n        let functionName = el['@func'].value;\n        let funcInfo = jsFuncMap[functionName];\n        let objName = \"q.u\" + IRToJavascript.getNextID();\n\n        let allParams=[];\n\n        for (let p = 0; p < el['@params'].length; p++) {\n          let params = IRToJavascript.emptyCode();\n          params = IRToJavascript.traverseTree(el['@params'][p], params, level+1, vars);\n          // console.log(params);\n          allParams[p] = params;\n        }\n        console.log(allParams);\n        let setupCode = \"\";\n        for (let param in allParams) {\n          setupCode += allParams[param].setup;\n          ccode.paramMarkers = ccode.paramMarkers.concat(allParams[param].paramMarkers);\n        }\n        ccode.setup += `${setupCode} ${funcInfo.setup(objName, allParams)};`;\n        ccode.loop += `${funcInfo.loop(objName, allParams)}`;\n        return ccode;\n      },\n      '@setvar': (ccode, el) => {\n        // console.log(\"memset\");\n        // console.log(vars);\n        let memIdx = vars[el['@varname']];\n        if (memIdx == undefined) {\n          memIdx = Object.keys(vars).length;\n          vars[el['@varname']] = memIdx;\n        }\n        let varValueCode = IRToJavascript.traverseTree(el['@varvalue'], IRToJavascript.emptyCode(), level+1, vars);\n        ccode.setup += varValueCode.setup;\n        // ccode.loop = `this.setvar(q, '${el['@varname']}', ${varValueCode.loop})`;\n        ccode.loop = `(mem[${memIdx}] = ${varValueCode.loop})`;\n        return ccode;\n      },\n      '@getvar': (ccode, el) => {\n        let memIdx = vars[el.value];\n        if (memIdx == undefined) {\n          memIdx = Object.keys(vars).length;\n          vars[el.value] = memIdx;\n        }\n        // ccode.loop += `this.getvar(q, '${el.value}')`;\n        ccode.loop += `mem[${memIdx}]`;\n        return ccode;\n      },\n      '@string': (ccode, el) => {\n        if (typeof el === 'string' || el instanceof String) {\n          // console.log(\"String: \" + el);\n          ccode.loop += `'${el}'`;\n        } else {\n          ccode = IRToJavascript.traverseTree(el, ccode, level, vars);\n        }\n        return ccode;\n      },\n      '@num': (ccode, el) => {\n        if (el.value) {\n          ccode.loop += `${el.value}`;\n        }\n        //  else {\n        //   ccode = IRToJavascript.traverseTree(el, ccode, level);\n        // }\n        return ccode;\n      },\n    }\n\n    if (Array.isArray(t)) {\n      t.map((el) => {\n        Object.keys(el).map((k) => {\n          code = attribMap[k](code, el[k]);\n        });\n      })\n    } else {\n      Object.keys(t).map((k) => {\n        // console.log(k);\n        code = attribMap[k](code, t[k]);\n      });\n    }\n    return code;\n  }\n\n  static treeToCode(tree) {\n    // console.log(tree);\n    let vars = {};\n    let code = IRToJavascript.traverseTree(tree, IRToJavascript.emptyCode(), 0, vars);\n    code.setup = `() => {let q=this.newq(); ${code.setup}; return q;}`;\n    code.loop = `(q, inputs, mem, clock) => {${code.loop} return q.sigOut;}`\n    console.log(code.loop);\n    // console.log(code.paramMarkers);\n    return code;\n  }\n}\n\nexport default IRToJavascript;\n","// Generated automatically by nearley, version 2.16.0\n// http://github.com/Hardmath123/nearley\n(function () {\nfunction id(x) { return x[0]; }\n\nvar semaIR = require('./semaIR.js');\nconsole.log(semaIR);\n\nconst moo = require(\"moo\"); // this 'require' creates a node dependency\n\nconst lexer = moo.compile({\n  separator:    /,/,\n  paramEnd:     /}/,\n  paramBegin:   /{/,\n  variable:     /:[a-zA-Z0-9]+:/,\n  sample:       { match: /\\\\[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  stretch:      { match: /\\@[a-zA-Z0-9]+/, lineBreaks: true, value: x => x.slice(1, x.length)},\n  oscAddress:   /(?:\\/[a-zA-Z0-9]+)+/,\n  number:       /-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?(?:[eE][-+]?[0-9]+)?\\b/,\n  semicolon:    /;/,\n  funcName:     /[a-zA-Z][a-zA-Z0-9]*/,\n  comment:      /#[^\\n]*/,\n  ws:           {match: /\\s+/, lineBreaks: true},\n});\n\nvar grammar = {\n    Lexer: lexer,\n    ParserRules: [\n    {\"name\": \"main\", \"symbols\": [\"_\", \"Statement\", \"_\"], \"postprocess\": d => ({ \"@lang\" : d[1] })},\n    {\"name\": \"Statement\", \"symbols\": [\"Expression\", \"_\", (lexer.has(\"semicolon\") ? {type: \"semicolon\"} : semicolon), \"_\", \"Statement\"], \"postprocess\": d => [{ \"@spawn\": d[0] }].concat(d[4])},\n    {\"name\": \"Statement\", \"symbols\": [\"Expression\"], \"postprocess\": d => [{\"@sigOut\": { \"@spawn\": d[0] }}]},\n    {\"name\": \"Expression\", \"symbols\": [\"ParameterList\", \"_\", (lexer.has(\"funcName\") ? {type: \"funcName\"} : funcName)], \"postprocess\": d=> semaIR.synth(d[2].value, d[0][\"@params\"])},\n    {\"name\": \"Expression\", \"symbols\": [\"ParameterList\", \"_\", (lexer.has(\"sample\") ? {type: \"sample\"} : sample)], \"postprocess\": d => semaIR.synth(\"sampler\", d[0][\"@params\"].concat([semaIR.str(d[2].value)]))},\n    {\"name\": \"Expression\", \"symbols\": [\"ParameterList\", \"_\", (lexer.has(\"stretch\") ? {type: \"stretch\"} : stretch)], \"postprocess\": d => semaIR.synth(\"stretch\", d[0][\"@params\"].concat([semaIR.str(d[2].value)]))},\n    {\"name\": \"Expression\", \"symbols\": [(lexer.has(\"oscAddress\") ? {type: \"oscAddress\"} : oscAddress)], \"postprocess\": d=> semaIR.synth(\"oscin\", [semaIR.str(d[0].value),semaIR.num(-1)])},\n    {\"name\": \"Expression\", \"symbols\": [\"ParameterList\", \"_\", (lexer.has(\"oscAddress\") ? {type: \"oscAddress\"} : oscAddress)], \"postprocess\": d=> semaIR.synth(\"oscin\", [semaIR.str(d[2].value),d[0][\"@params\"][0]])},\n    {\"name\": \"Expression\", \"symbols\": [(lexer.has(\"variable\") ? {type: \"variable\"} : variable), \"_\", \"Expression\"], \"postprocess\": d => semaIR.setvar(d[0],d[2])},\n    {\"name\": \"Expression\", \"symbols\": [(lexer.has(\"comment\") ? {type: \"comment\"} : comment)], \"postprocess\": id},\n    {\"name\": \"ParameterList\", \"symbols\": [(lexer.has(\"paramBegin\") ? {type: \"paramBegin\"} : paramBegin), \"Params\", (lexer.has(\"paramEnd\") ? {type: \"paramEnd\"} : paramEnd)], \"postprocess\": d => ({\"paramBegin\":d[0], \"@params\":d[1], \"paramEnd\":d[2]} )},\n    {\"name\": \"Params\", \"symbols\": [\"ParamElement\"], \"postprocess\": (d) => ([d[0]])},\n    {\"name\": \"Params\", \"symbols\": [\"ParamElement\", \"_\", (lexer.has(\"separator\") ? {type: \"separator\"} : separator), \"_\", \"Params\"], \"postprocess\": d => [d[0]].concat(d[4])},\n    {\"name\": \"ParamElement\", \"symbols\": [(lexer.has(\"number\") ? {type: \"number\"} : number)], \"postprocess\": (d) => ({\"@num\":d[0]})},\n    {\"name\": \"ParamElement\", \"symbols\": [\"Expression\"], \"postprocess\": id},\n    {\"name\": \"ParamElement\", \"symbols\": [(lexer.has(\"variable\") ? {type: \"variable\"} : variable)], \"postprocess\": (d) => semaIR.getvar(d[0])},\n    {\"name\": \"ParamElement\", \"symbols\": [(lexer.has(\"paramBegin\") ? {type: \"paramBegin\"} : paramBegin), \"Params\", (lexer.has(\"paramEnd\") ? {type: \"paramEnd\"} : paramEnd)], \"postprocess\": (d) => ({\"@list\":d[1]})},\n    {\"name\": \"_$ebnf$1\", \"symbols\": []},\n    {\"name\": \"_$ebnf$1\", \"symbols\": [\"_$ebnf$1\", \"wschar\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"_\", \"symbols\": [\"_$ebnf$1\"], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"__$ebnf$1\", \"symbols\": [\"wschar\"]},\n    {\"name\": \"__$ebnf$1\", \"symbols\": [\"__$ebnf$1\", \"wschar\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"__\", \"symbols\": [\"__$ebnf$1\"], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"wschar\", \"symbols\": [(lexer.has(\"ws\") ? {type: \"ws\"} : ws)], \"postprocess\": id}\n]\n  , ParserStart: \"main\"\n}\nif (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {\n   module.exports = grammar;\n} else {\n   window.grammar = grammar;\n}\n})();\n","import * as nearley from 'nearley/lib/nearley.js';\nimport * as grammar from './livelang.js';\nimport IRToJavascript from '../IR/IR.js'\n\nvar parserStartPoint;\nlet processor = nearley.Grammar.fromCompiled(grammar);\nlet parser = new nearley.Parser(processor);\nparserStartPoint = parser.save();\nconsole.log('Nearley parser loaded')\n\nvar ts = 0;\nonmessage = (m) => {\n  // console.log(m.data);\n  if (m.data !== undefined) {\n    try {\n      parser.feed(m.data);\n      // console.log(parser.results)\n      postMessage({\n        \"treeTS\": 1\n      });\n      console.log(JSON.stringify(parser.results));\n      let jscode = IRToJavascript.treeToCode(parser.results);\n      jscode.paramMarkers = JSON.stringify(jscode.paramMarkers);\n      console.log(jscode);\n      postMessage(jscode);\n    } catch (err) {\n      console.log(\"Error\" + err); // \"Error at character 9\"\n    }\n  }\n  parser.restore(parserStartPoint);\n};\n","function num(val)  {\n    return {\"@num\":{value:val}}\n};\n\nfunction str(val) {\n    return {\"@string\":val}\n};\n\nfunction synth(functionName, params ) {\n  let branch = {\"@sigp\": {\"@params\":params, \"@func\":{value:functionName}}};\n  return branch;\n};\n\nfunction setvar (name,branch) {\n    return {\"@setvar\": {\"@varname\":name,\"@varvalue\":branch}};\n};\n\nfunction getvar (name) {\n    return {\"@getvar\":name};\n};\n\nmodule.exports = {num,str,synth,setvar,getvar};\n"],"sourceRoot":""}